{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["import type { PluginListenerHandle } from '@capacitor/core';\n\nexport interface BluetoothState {\n  enabled: boolean;\n}\n\nexport interface Permissions {\n  [key: string]: string;\n}\n\nexport interface BleMeshDevice {\n  name: string;\n  rssi: number;\n  macAddress: string;\n  uuid?: string;\n  unicastAddress?: number;\n}\n\nexport interface ScanMeshDevices {\n  unprovisioned: BleMeshDevice[];\n  provisioned: BleMeshDevice[];\n}\n\nexport interface ProvisioningCapabilities {\n  numberOfElements: number;\n  availableOOBTypes: string[];\n  algorithms: number;\n  publicKeyType: number;\n  staticOobTypes: number;\n  outputOobSize: number;\n  outputOobActions: number;\n  inputOobSize: number;\n  inputOobActions: number;\n}\n\nexport interface ProvisioningStatus {\n  provisioningComplete: boolean;\n  uuid: string;\n  unicastAddress?: number;\n}\n\nexport interface PluginCallRejection {\n  message: string;\n  data: {\n    methodName: string;\n    [key: string]: any;\n  };\n}\n\nexport type Data = DataView | string;\n\nexport interface ReadResult {\n  value?: Data;\n}\n\nexport interface ModelMessageStatus {\n  src: number;\n  dst: number;\n  opcode: number;\n  vendorModelId?: number;\n  data: any;\n}\n\nexport interface AddAppKeyStatus {\n  success: boolean;\n}\n\nexport interface MeshNetworkObject {\n  meshNetwork: string;\n}\n\nexport interface NrfMeshPlugin {\n  isBluetoothEnabled(): Promise<BluetoothState>;\n  requestBluetoothEnable(): Promise<BluetoothState>;\n  checkPermissions(): Promise<Permissions>;\n  requestPermissions(): Promise<any>;\n  scanMeshDevices(options: { timeout: number }): Promise<ScanMeshDevices>;\n  getProvisioningCapabilities(options: {\n    macAddress: string;\n    uuid: string;\n  }): Promise<ProvisioningCapabilities | void>;\n  provisionDevice(options: {\n    macAddress: string;\n    uuid: string;\n  }): Promise<ProvisioningStatus>;\n  unprovisionDevice(options: { unicastAddress: number }): Promise<void>;\n  createApplicationKey(): Promise<void>;\n  removeApplicationKey(options: { appKeyIndex: number }): Promise<void>;\n  addApplicationKeyToNode(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n  }): Promise<AddAppKeyStatus>;\n  bindApplicationKeyToModel(options: {\n    elementAddress: number;\n    appKeyIndex: number;\n    modelId: number;\n  }): Promise<void>;\n  compositionDataGet(options: { unicastAddress: number }): Promise<void>;\n  sendGenericOnOffSet(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n    onOff: boolean;\n    acknowledgement?: boolean;\n  }): Promise<ModelMessageStatus | PluginCallRejection>;\n  sendGenericOnOffGet(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n  }): Promise<ModelMessageStatus | PluginCallRejection>;\n  sendGenericPowerLevelSet(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n    powerLevel: number;\n  }): Promise<ModelMessageStatus | PluginCallRejection>;\n  sendGenericPowerLevelGet(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n  }): Promise<ModelMessageStatus | PluginCallRejection>;\n  sendLightHslSet(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n    hue: number;\n    saturation: number;\n    lightness: number;\n  }): Promise<ModelMessageStatus | PluginCallRejection>;\n  sendLightHslGet(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n  }): Promise<ModelMessageStatus | PluginCallRejection>;\n  sendLightCtlSet(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n    lightness: number;\n    temperature: number;\n    deltaUv: number;\n  }): Promise<ModelMessageStatus | PluginCallRejection>;\n  sendVendorModelMessage(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n    modelId: number;\n    opcode: number;\n    payload?: Uint8Array;\n    opPairCode?: number;\n  }): Promise<ModelMessageStatus | PluginCallRejection>;\n  initMeshNetwork(options: { networkName: string }): Promise<MeshNetworkObject>;\n  exportMeshNetwork(): Promise<MeshNetworkObject>;\n  importMeshNetwork(options: { meshNetwork: string }): Promise<void>;\n  addListener(\n    eventName: string,\n    listenerFunc: (event: any) => void,\n  ): Promise<PluginListenerHandle>;\n  removeAllListeners(): Promise<void>;\n}\n"]}