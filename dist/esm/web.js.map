{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { AddAppKeyStatus, MeshNetworkObject, ModelMessageStatus, NrfMeshPlugin, Permissions, PluginCallRejection, ProvisioningCapabilities, ProvisioningStatus, ScanMeshDevices } from './definitions';\n\nexport class NrfMeshWeb extends WebPlugin implements NrfMeshPlugin {\n  async checkPermissions(): Promise<Permissions> {\n    console.log('checkPermissions');\n    return { 'LOCATION': 'granted', 'BLUETOOTH': 'granted' };\n  }\n\n  async requestPermissions(): Promise<any> {\n    console.log('requestPermissions');\n    return;\n  }\n\n  async scanMeshDevices(): Promise<ScanMeshDevices> {\n    console.log('scanMeshDevices');\n    return { unprovisioned: [], provisioned: [] };\n  }\n\n  async getProvisioningCapabilities(): Promise<ProvisioningCapabilities | void> {\n    console.log('getProvisioningCapabilities');\n    return;\n  }\n\n  async provisionDevice(): Promise<ProvisioningStatus> {\n    console.log('provisionDevice');\n    return { provisioningComplete: true, uuid: '1234' };\n  }\n\n  async unprovisionDevice(): Promise<void> {\n    console.log('unprovisionDevice');\n  }\n\n  async createApplicationKey(): Promise<void> {\n    console.log('createApplicationKey');\n  }\n\n  async removeApplicationKey(): Promise<void> {\n    console.log('removeApplicationKey');\n  }\n\n  async addApplicationKeyToNode(): Promise<AddAppKeyStatus> {\n    console.log('addApplicationKeyToNode');\n    return { success: true };\n  }\n\n  async bindApplicationKeyToModel(): Promise<void> {\n    console.log('bindApplicationKeyToModel');\n  }\n\n  async compositionDataGet(): Promise<void> {\n    console.log('compositionDataGet');\n  }\n\n  async sendGenericOnOffSet(): Promise<ModelMessageStatus | PluginCallRejection> {\n    console.log('sendGenericOnOffSet');\n    return { src: 1, dst: 2, opcode: 3, data: {} };\n  }\n\n  async sendGenericOnOffGet(): Promise<ModelMessageStatus | PluginCallRejection> {\n    console.log('sendGenericOnOffSet');\n    return { src: 1, dst: 2, opcode: 3, data: {} };\n  }\n\n  async sendGenericPowerLevelSet(): Promise<ModelMessageStatus | PluginCallRejection> {\n    console.log('sendGenericPowerLevelSet');\n    return { src: 1, dst: 2, opcode: 3, data: {} };\n  }\n\n  async sendGenericPowerLevelGet(): Promise<ModelMessageStatus | PluginCallRejection> {\n    console.log('sendGenericPowerLevelGet');\n    return { src: 1, dst: 2, opcode: 3, data: {} };\n  }\n\n  async sendLightHslSet(): Promise<ModelMessageStatus | PluginCallRejection> {\n    console.log('sendLightHslSet');\n    return { src: 1, dst: 2, opcode: 3, data: {} };\n  }\n\n  async sendLightHslGet(): Promise<ModelMessageStatus | PluginCallRejection> {\n    console.log('sendLightHslGet');\n    return { src: 1, dst: 2, opcode: 3, data: {} };\n  }\n\n  initMeshNetwork(): Promise<MeshNetworkObject> {\n    return Promise.resolve({ meshNetwork: 'meshNetwork' });\n  }\n\n  async exportMeshNetwork(): Promise<MeshNetworkObject> {\n    console.log('exportMeshNetwork');\n    return { meshNetwork: 'meshNetwork' };\n  }\n\n  async importMeshNetwork(): Promise<void> {\n    console.log('importMeshNetwork');\n  }\n\n  async sendVendorModelMessage(options: {\n    unicastAddress: number;\n    appKeyIndex: number;\n    modelId: number;\n    companyIdentifier: number;\n    opcode: number;\n    payload: Uint8Array;\n  }): Promise<ModelMessageStatus | PluginCallRejection> {\n    console.log('sendVendorModelMessage', options);\n    return { src: 1, dst: 2, opcode: 3, data: {} };\n  }\n\n  sendLightCtlSet(): Promise<ModelMessageStatus | PluginCallRejection> {\n    throw new Error('Method not implemented.');\n  }\n}\n"]}